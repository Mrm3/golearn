// Package db_model contains the types for schema 'immortality'.
package db_model

// Code generated by xo. DO NOT EDIT.

import (
	"errors"
)

// Quota represents a row from 'immortality.quota'.
type Quota struct {
	ID          uint64 `json:"id"`           // id
	SubjectID   string `json:"subject_id"`   // subject_id
	SubjectType int8   `json:"subject_type"` // subject_type
	ObjectType  int8   `json:"object_type"`  // object_type
	Allow       int64  `json:"allow"`        // allow
	Count       int64  `json:"count"`        // count

	// xo fields
	_exists, _deleted bool
}

// Exists determines if the Quota exists in the database.
func (q *Quota) Exists() bool {
	return q._exists
}

// Deleted provides information if the Quota has been deleted from the database.
func (q *Quota) Deleted() bool {
	return q._deleted
}

// Insert inserts the Quota to the database.
func (q *Quota) Insert(db XODB) error {
	var err error

	// if already exist, bail
	if q._exists {
		return errors.New("insert failed: already exists")
	}

	// sql insert query, primary key provided by autoincrement
	const sqlstr = `INSERT INTO immortality.quota (` +
		`subject_id, subject_type, object_type, allow, count` +
		`) VALUES (` +
		`?, ?, ?, ?, ?` +
		`)`

	// run query
	XOLog(sqlstr, q.SubjectID, q.SubjectType, q.ObjectType, q.Allow, q.Count)
	res, err := db.Exec(sqlstr, q.SubjectID, q.SubjectType, q.ObjectType, q.Allow, q.Count)
	if err != nil {
		return err
	}

	// retrieve id
	id, err := res.LastInsertId()
	if err != nil {
		return err
	}

	// set primary key and existence
	q.ID = uint64(id)
	q._exists = true

	return nil
}

// Update updates the Quota in the database.
func (q *Quota) Update(db XODB) error {
	var err error

	// if doesn't exist, bail
	if !q._exists {
		return errors.New("update failed: does not exist")
	}

	// if deleted, bail
	if q._deleted {
		return errors.New("update failed: marked for deletion")
	}

	// sql query
	const sqlstr = `UPDATE immortality.quota SET ` +
		`subject_id = ?, subject_type = ?, object_type = ?, allow = ?, count = ?` +
		` WHERE id = ?`

	// run query
	XOLog(sqlstr, q.SubjectID, q.SubjectType, q.ObjectType, q.Allow, q.Count, q.ID)
	_, err = db.Exec(sqlstr, q.SubjectID, q.SubjectType, q.ObjectType, q.Allow, q.Count, q.ID)
	return err
}

// Save saves the Quota to the database.
func (q *Quota) Save(db XODB) error {
	if q.Exists() {
		return q.Update(db)
	}

	return q.Insert(db)
}

// Delete deletes the Quota from the database.
func (q *Quota) Delete(db XODB) error {
	var err error

	// if doesn't exist, bail
	if !q._exists {
		return nil
	}

	// if deleted, bail
	if q._deleted {
		return nil
	}

	// sql query
	const sqlstr = `DELETE FROM immortality.quota WHERE id = ?`

	// run query
	XOLog(sqlstr, q.ID)
	_, err = db.Exec(sqlstr, q.ID)
	if err != nil {
		return err
	}

	// set deleted
	q._deleted = true

	return nil
}

// QuotaBySubjectID retrieves a row from 'immortality.quota' as a Quota.
//
// Generated from index 'idx_subject_id'.
func QuotaBySubjectID(db XODB, subjectID string) ([]*Quota, error) {
	var err error

	// sql query
	const sqlstr = `SELECT ` +
		`id, subject_id, subject_type, object_type, allow, count ` +
		`FROM immortality.quota ` +
		`WHERE subject_id = ?`

	// run query
	XOLog(sqlstr, subjectID)
	q, err := db.Query(sqlstr, subjectID)
	if err != nil {
		return nil, err
	}
	defer q.Close()

	// load results
	res := []*Quota{}
	for q.Next() {
		qVal := Quota{
			_exists: true,
		}

		// scan
		err = q.Scan(&qVal.ID, &qVal.SubjectID, &qVal.SubjectType, &qVal.ObjectType, &qVal.Allow, &qVal.Count)
		if err != nil {
			return nil, err
		}

		res = append(res, &qVal)
	}

	return res, nil
}

// QuotaBySubjectIDObjectType retrieves a row from 'immortality.quota' as a Quota.
//
// Generated from index 'idx_update'.
func QuotaBySubjectIDObjectType(db XODB, subjectID string, objectType int8) (*Quota, error) {
	var err error

	// sql query
	const sqlstr = `SELECT ` +
		`id, subject_id, subject_type, object_type, allow, count ` +
		`FROM immortality.quota ` +
		`WHERE subject_id = ? AND object_type = ?`

	// run query
	XOLog(sqlstr, subjectID, objectType)
	qVal := Quota{
		_exists: true,
	}

	err = db.QueryRow(sqlstr, subjectID, objectType).Scan(&qVal.ID, &qVal.SubjectID, &qVal.SubjectType, &qVal.ObjectType, &qVal.Allow, &qVal.Count)
	if err != nil {
		return nil, err
	}

	return &qVal, nil
}

// QuotaByID retrieves a row from 'immortality.quota' as a Quota.
//
// Generated from index 'quota_id_pkey'.
func QuotaByID(db XODB, id uint64) (*Quota, error) {
	var err error

	// sql query
	const sqlstr = `SELECT ` +
		`id, subject_id, subject_type, object_type, allow, count ` +
		`FROM immortality.quota ` +
		`WHERE id = ?`

	// run query
	XOLog(sqlstr, id)
	qVal := Quota{
		_exists: true,
	}

	err = db.QueryRow(sqlstr, id).Scan(&qVal.ID, &qVal.SubjectID, &qVal.SubjectType, &qVal.ObjectType, &qVal.Allow, &qVal.Count)
	if err != nil {
		return nil, err
	}

	return &qVal, nil
}
